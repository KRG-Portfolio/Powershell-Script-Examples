#Function to check for suspicious processes
function Get-SuspiciousProcesses($userName) {
    $suspiciousProcesses = @()
    $processes = Get-WmiObject Win32_Process | Where-Object { $_.GetOwner().User -eq $userName }
    
    foreach ($process in $processes) {
        #Modify the name list to your use case
        $suspiciousNames = @("mimikatz", "psexec", "netcat", "nmap", "wireshark", "powershell.exe")
        
        if ($suspiciousNames -contains $process.Name) {
            $suspiciousProcesses += $process.Name
        }
        
        #Check for unusual parent processes (e.g., notepad.exe spawning cmd.exe) This can be modified to address different processes
        $parent = Get-WmiObject Win32_Process -Filter "ProcessId = $($process.ParentProcessId)"
        if ($parent.Name -eq "notepad.exe" -and $process.Name -eq "cmd.exe") {
            $suspiciousProcesses += "$($process.Name) (unusual parent: $($parent.Name))"
        }
    }
    
    return $suspiciousProcesses
}

#Get all user accounts on the local machine and sort alphabetically 
$users = Get-WmiObject -Class Win32_UserAccount -Filter "LocalAccount=True" | 
    Select-Object Name, FullName, Description, Disabled, 
    @{Name="SuspiciousProcesses"; Expression={Get-SuspiciousProcesses $_.Name}} |
    Sort-Object Name

#Displays the sorted list of users with related suspicious process information
$users | Format-Table -AutoSize

#Uncomment the next line if you need to export this to a CSV file
# $users | Export-Csv -Path "C:\Users_with_Suspicious_Processes.csv" -NoTypeInformation